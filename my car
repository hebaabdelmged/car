from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import pygame
import numpy as np
from math import *


def draw_circle(r=0.5,xc=0,yc=0):      
      glBegin(GL_POLYGON)
      #r=0.5
      for theta in np.arange(0,2*pi,0.02):
            glColor3f(0.97,1,1)
            x=xc+r*cos(theta)
            y=yc+r*sin(theta)
            glVertex(x,y)
      glEnd() 

def myInit():
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(60.0,1.0,1.0,30.0)
    gluLookAt(7,8,17,
              0,0,0,
              0,1,0)
    glClearColor(0.7 ,0.7 , 0.6, 1)
    glEnable(GL_DEPTH_TEST)
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
    #glClear(GL_COLOR_BUFFER_BIT)


angle=0
step=0
forward=True
def draw():
    global angle
    global step
    global forward
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    #glClear(GL_COLOR_BUFFER_BIT)
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
    glLineWidth(3)

    #glTranslate(0,0,0)
    #glRotate(10,1,0,0)
    #glRotate(-10,0,1,0)
    glBegin(GL_POLYGON)
    glColor3f(0.7,0.8,1)
    glVertex(20,20,0)
    glVertex(-200,20,0)
    glVertex(-200,0,0)
    glVertex(20,0,0)
    glEnd()

    glLoadIdentity()
    glTranslate(1,3,1)
    glScale(2,0.55,1)
    draw_circle(1.5,1,9)

    glLoadIdentity()
    glTranslate(5,3,1)
    glScale(2,0.55,1)
    draw_circle(2,1,9)

    glLoadIdentity()
    glTranslate(-2.5,4,1)
    glScale(2,0.55,1)
    draw_circle(1.5,0,9)

    glLoadIdentity()
    glTranslate(-6,4,1)
    glScale(2,0.55,1)
    draw_circle(1.9,0,9)

    glLoadIdentity()
    glTranslate(-9.3,4,1)
    glScale(2,0.55,1)
    draw_circle(1.3,0,9)

    
    glLoadIdentity()
    glTranslate(0,0,2)
    glRotate(-90,1,0,0)
    glColor3f(0.7,0.4,0)
    glutSolidCone(0.5,4,12,12)

    glLoadIdentity()
    glTranslate(8,0,2)
    glRotate(-90,1,0,0)
    glColor3f(0.7,0.4,0)
    glutSolidCone(0.5,4,12,12)

    glLoadIdentity()
    glTranslate(-8,0,2)
    glRotate(-90,1,0,0)
    glColor3f(0.7,0.4,0)
    glutSolidCone(0.5,4,12,12)

    glLoadIdentity()
    glTranslate(0,4.5,2)
    glRotate(-90,1,0,0)
    glColor3f(0.4,0.6,0.1)
    glutWireSphere(2,30,30)

    glLoadIdentity()
    glTranslate(8,4.5,2)
    glRotate(-90,1,0,0)
    glColor3f(0.4,0.6,0.1)
    glutWireSphere(2,30,30)

    glLoadIdentity()
    glTranslate(-8,4.5,2)
    glRotate(-90,1,0,0)
    glColor3f(0.4,0.6,0.1)
    glutWireSphere(2,30,30)
    
    glLoadIdentity()
    glColor3f(1,1,1)
    glTranslate(1,-1,6)
    glScale(2,0.0001,0.5)
    glutSolidCube(2)

    glLoadIdentity()
    glColor3f(1,1,1)
    glTranslate(7,-1,6)
    glScale(2,0.0001,0.5)
    glutSolidCube(2)

    glLoadIdentity()
    glColor3f(1,1,1)
    glTranslate(-5,-1,6)
    glScale(2,0.0001,0.5)
    glutSolidCube(2)

    

    
    glLoadIdentity()
    glColor3f(0.2,0,0.4)
    glTranslate(step,0,6)
    glScale(1,0.25,0.5)
    glutSolidCube(6)

    glLoadIdentity()
    glColor3f(0,0,0)
    glTranslate(step,0,6)
    glScale(1,0.25,0.5)
    glutWireCube(6)

    glLoadIdentity()
    glColor3f(0.2,0.0,0.4)
    glTranslate(step, 6*0.25, 6.0)
    glScale(0.5,0.25,0.5)
    glutSolidCube(6)

    glLoadIdentity()
    glColor3f(0,0,0)
    glTranslate(step, 6*0.25, 6.0)
    glScale(0.5,0.25,0.5)
    glutWireCube(6)

    glColor3f(0,0,0)
    glLoadIdentity()
    glTranslate(6*0.5+step,-6*0.25*0.5,(6*0.5*0.5)+6)
    glRotate(angle,0,0,-1)
    glutSolidTorus(0.25,0.5,16,16)

    glColor3f(0,0,0)
    glLoadIdentity()
    glTranslate(-6*0.5+step,-6*0.25*0.5,(6*0.5*0.5)+6)
    glutSolidTorus(0.25,0.5,16,16)

    glColor3f(0,0,0)
    glLoadIdentity()
    glTranslate(6*0.5+step,-6*0.25*0.5,(-6*0.5*0.5)+6)
    glutSolidTorus(0.25,0.5,16,16)

    glColor3f(0,0,0)
    glLoadIdentity()
    glTranslate(-6*0.5+step,-6*0.25*0.5,(-6*0.5*0.5)+6)
    glutSolidTorus(0.25,0.5,16,16)
    if forward:
        angle+=0.09
        step+=0.05
        if step>9:
            
            forward=False
    else :
        angle-=0.09
        step-=0.05
        if step<-6:
            forward=True
              
       
    
    glutSwapBuffers()
    
    


glutInit()
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
glutInitWindowSize(600, 600)
window = glutCreateWindow(b"sec5" )
myInit()
glutDisplayFunc(draw)
glutIdleFunc(draw)
glutMainLoop()
